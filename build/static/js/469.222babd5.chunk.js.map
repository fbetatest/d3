{"version":3,"file":"static/js/469.222babd5.chunk.js","mappings":"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","sources":["app/modules/apps/user-management/users-list/core/_requests.ts","app/modules/apps/user-management/users-list/core/QueryRequestProvider.tsx","app/modules/apps/user-management/users-list/core/QueryResponseProvider.tsx","app/modules/apps/user-management/users-list/core/ListViewProvider.tsx","app/modules/apps/user-management/users-list/components/header/UserListToolbar.tsx","app/modules/apps/user-management/users-list/components/header/UsersListGrouping.tsx","app/modules/apps/user-management/users-list/components/header/UsersListHeader.tsx","app/modules/apps/user-management/users-list/table/columns/CustomHeaderColumn.tsx","app/modules/apps/user-management/users-list/table/columns/CustomRow.tsx","app/modules/apps/user-management/users-list/table/columns/UserInfoCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserLastLoginCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserTwoStepsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserActionsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserCustomHeader.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionHeader.tsx","app/modules/apps/user-management/users-list/table/columns/_columns.tsx","app/modules/apps/user-management/users-list/components/loading/UsersListLoading.tsx","app/modules/apps/user-management/users-list/components/pagination/UsersListPagination.tsx","app/modules/apps/user-management/users-list/table/UsersTable.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalHeader.tsx","app/modules/apps/user-management/users-list/core/_models.ts","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalForm.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModal.tsx","app/modules/apps/user-management/users-list/UsersList.tsx","app/modules/apps/user-management/UsersPage.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = process.env.REACT_APP_THEME_API_URL\r\nconst USER_URL = `${API_URL}/user`\r\nconst GET_USERS_URL = `${API_URL}/users/query`\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n    .get(`${GET_USERS_URL}?${query}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${USER_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .put(USER_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(`${USER_URL}/${user.id}`, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${USER_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${USER_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, createUser, updateUser}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n  WithChildren,\r\n} from '../../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC<WithChildren> = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n  WithChildren,\r\n} from '../../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC<WithChildren> = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n  WithChildren,\r\n} from '../../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC<WithChildren> = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import {KTSVG} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n     \r\n\r\n       {/*  <UsersListFilter />/}\r\n\r\n      {/* begin::Add user */}\r\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add User\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\n\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n        <div></div>\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","// @ts-nocheck\r\nimport {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","// @ts-nocheck\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => (\r\n  <div className='d-flex align-items-center'>\r\n    {/* begin:: Avatar */}\r\n    <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n      <a href='#'>\r\n        {user.avatar ? (\r\n          <div className='symbol-label'>\r\n            <img src={toAbsoluteUrl(`/media/${user.avatar}`)} alt={user.name} className='w-100' />\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className={clsx(\r\n              'symbol-label fs-3',\r\n              `bg-light-${user.initials?.state}`,\r\n              `text-${user.initials?.state}`\r\n            )}\r\n          >\r\n            {user.initials?.label}\r\n          </div>\r\n        )}\r\n      </a>\r\n    </div>\r\n    <div className='d-flex flex-column'>\r\n      <a href='#' className='text-gray-800 text-hover-primary mb-1'>\r\n        {user.name}\r\n      </a>\r\n      <span>{user.email}</span>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  last_login?: string\r\n}\r\n\r\nconst UserLastLoginCell: FC<Props> = ({last_login}) => (\r\n  <div className='badge badge-light fw-bolder'>{last_login}</div>\r\n)\r\n\r\nexport {UserLastLoginCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  two_steps?: boolean\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({two_steps}) => (\r\n  <> {two_steps && <div className='badge badge-light-success fw-bolder'>Enabled</div>}</>\r\n)\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        Actions\r\n        <KTSVG path='/media/icons/duotune/arrows/arr072.svg' className='svg-icon-5 m-0' />\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","// @ts-nocheck\r\nimport {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Name' className='min-w-125px' />,\r\n    id: 'name',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Role' className='min-w-125px' />,\r\n    accessor: 'role',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Last login' className='min-w-125px' />\r\n    ),\r\n    id: 'last_login',\r\n    Cell: ({...props}) => <UserLastLoginCell last_login={props.data[props.row.index].last_login} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Two steps' className='min-w-125px' />\r\n    ),\r\n    id: 'two_steps',\r\n    Cell: ({...props}) => <UserTwoStepsCell two_steps={props.data[props.row.index].two_steps} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Joined day' className='min-w-125px' />\r\n    ),\r\n    accessor: 'joined_day',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst mappedLabel = (label: string): string => {\r\n  if (label === '&laquo; Previous') {\r\n    return 'Previous'\r\n  }\r\n\r\n  if (label === 'Next &raquo;') {\r\n    return 'Next'\r\n  }\r\n\r\n  return label\r\n}\r\n\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links\r\n              ?.map((link) => {\r\n                return {...link, label: mappedLabel(link.label)}\r\n              })\r\n              .map((link) => (\r\n                <li\r\n                  key={link.label}\r\n                  className={clsx('page-item', {\r\n                    active: pagination.page === link.page,\r\n                    disabled: isLoading,\r\n                    previous: link.label === 'Previous',\r\n                    next: link.label === 'Next',\r\n                  })}\r\n                >\r\n                  <a\r\n                    className={clsx('page-link', {\r\n                      'page-text': link.label === 'Previous' || link.label === 'Next',\r\n                      'me-5': link.label === 'Previous',\r\n                    })}\r\n                    onClick={() => updatePage(link.page)}\r\n                    style={{cursor: 'pointer'}}\r\n                  >\r\n                    {mappedLabel(link.label)}\r\n                  </a>\r\n                </li>\r\n              ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from '../table/columns/CustomHeaderColumn'\r\nimport {CustomRow} from '../table/columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add User</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../../_metronic/helpers'\r\nexport type User = {\r\n  id?: ID\r\n  name?: string\r\n  avatar?: string\r\n  email?: string\r\n  position?: string\r\n  role?: string\r\n  last_login?: string\r\n  two_steps?: boolean\r\n  joined_day?: string\r\n  online?: boolean\r\n  initials?: {\r\n    label: string\r\n    state: string\r\n  }\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nexport const initialUser: User = {\r\n  avatar: 'avatars/300-6.jpg',\r\n  position: 'Art Director',\r\n  role: 'Administrator',\r\n  name: '',\r\n  email: '',\r\n}\r\n","import {FC, useState} from 'react'\r\nimport * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport {isNotEmpty, toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {initialUser, User} from '../core/_models'\r\nimport clsx from 'clsx'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser, updateUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  user: User\r\n}\r\n\r\nconst editUserSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email('Wrong email format')\r\n    .min(3, 'Minimum 3 symbols')\r\n    .max(50, 'Maximum 50 symbols')\r\n    .required('Email is required'),\r\n  name: Yup.string()\r\n    .min(3, 'Minimum 3 symbols')\r\n    .max(50, 'Maximum 50 symbols')\r\n    .required('Name is required'),\r\n})\r\n\r\nconst UserEditModalForm: FC<Props> = ({user, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n\r\n  const [userForEdit] = useState<User>({\r\n    ...user,\r\n    avatar: user.avatar || initialUser.avatar,\r\n    role: user.role || initialUser.role,\r\n    position: user.position || initialUser.position,\r\n    name: user.name || initialUser.name,\r\n    email: user.email || initialUser.email,\r\n  })\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const blankImg = toAbsoluteUrl('/media/svg/avatars/blank.svg')\r\n  const userAvatarImg = toAbsoluteUrl(`/media/${userForEdit.avatar}`)\r\n\r\n  const formik = useFormik({\r\n    initialValues: userForEdit,\r\n    validationSchema: editUserSchema,\r\n    onSubmit: async (values, {setSubmitting}) => {\r\n      setSubmitting(true)\r\n      try {\r\n        if (isNotEmpty(values.id)) {\r\n          await updateUser(values)\r\n        } else {\r\n          await createUser(values)\r\n        }\r\n      } catch (ex) {\r\n        console.error(ex)\r\n      } finally {\r\n        setSubmitting(true)\r\n        cancel(true)\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <form id='kt_modal_add_user_form' className='form' onSubmit={formik.handleSubmit} noValidate>\r\n        {/* begin::Scroll */}\r\n        <div\r\n          className='d-flex flex-column scroll-y me-n7 pe-7'\r\n          id='kt_modal_add_user_scroll'\r\n          data-kt-scroll='true'\r\n          data-kt-scroll-activate='{default: false, lg: true}'\r\n          data-kt-scroll-max-height='auto'\r\n          data-kt-scroll-dependencies='#kt_modal_add_user_header'\r\n          data-kt-scroll-wrappers='#kt_modal_add_user_scroll'\r\n          data-kt-scroll-offset='300px'\r\n        >\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='d-block fw-bold fs-6 mb-5'>Avatar</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Image input */}\r\n            <div\r\n              className='image-input image-input-outline'\r\n              data-kt-image-input='true'\r\n              style={{backgroundImage: `url('${blankImg}')`}}\r\n            >\r\n              {/* begin::Preview existing avatar */}\r\n              <div\r\n                className='image-input-wrapper w-125px h-125px'\r\n                style={{backgroundImage: `url('${userAvatarImg}')`}}\r\n              ></div>\r\n              {/* end::Preview existing avatar */}\r\n\r\n              {/* begin::Label */}\r\n              {/* <label\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='change'\r\n              data-bs-toggle='tooltip'\r\n              title='Change avatar'\r\n            >\r\n              <i className='bi bi-pencil-fill fs-7'></i>\r\n\r\n              <input type='file' name='avatar' accept='.png, .jpg, .jpeg' />\r\n              <input type='hidden' name='avatar_remove' />\r\n            </label> */}\r\n              {/* end::Label */}\r\n\r\n              {/* begin::Cancel */}\r\n              {/* <span\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='cancel'\r\n              data-bs-toggle='tooltip'\r\n              title='Cancel avatar'\r\n            >\r\n              <i className='bi bi-x fs-2'></i>\r\n            </span> */}\r\n              {/* end::Cancel */}\r\n\r\n              {/* begin::Remove */}\r\n              {/* <span\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='remove'\r\n              data-bs-toggle='tooltip'\r\n              title='Remove avatar'\r\n            >\r\n              <i className='bi bi-x fs-2'></i>\r\n            </span> */}\r\n              {/* end::Remove */}\r\n            </div>\r\n            {/* end::Image input */}\r\n\r\n            {/* begin::Hint */}\r\n            {/* <div className='form-text'>Allowed file types: png, jpg, jpeg.</div> */}\r\n            {/* end::Hint */}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-2'>Full Name</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Input */}\r\n            <input\r\n              placeholder='Full name'\r\n              {...formik.getFieldProps('name')}\r\n              type='text'\r\n              name='name'\r\n              className={clsx(\r\n                'form-control form-control-solid mb-3 mb-lg-0',\r\n                {'is-invalid': formik.touched.name && formik.errors.name},\r\n                {\r\n                  'is-valid': formik.touched.name && !formik.errors.name,\r\n                }\r\n              )}\r\n              autoComplete='off'\r\n              disabled={formik.isSubmitting || isUserLoading}\r\n            />\r\n            {formik.touched.name && formik.errors.name && (\r\n              <div className='fv-plugins-message-container'>\r\n                <div className='fv-help-block'>\r\n                  <span role='alert'>{formik.errors.name}</span>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {/* end::Input */}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-2'>Email</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Input */}\r\n            <input\r\n              placeholder='Email'\r\n              {...formik.getFieldProps('email')}\r\n              className={clsx(\r\n                'form-control form-control-solid mb-3 mb-lg-0',\r\n                {'is-invalid': formik.touched.email && formik.errors.email},\r\n                {\r\n                  'is-valid': formik.touched.email && !formik.errors.email,\r\n                }\r\n              )}\r\n              type='email'\r\n              name='email'\r\n              autoComplete='off'\r\n              disabled={formik.isSubmitting || isUserLoading}\r\n            />\r\n            {/* end::Input */}\r\n            {formik.touched.email && formik.errors.email && (\r\n              <div className='fv-plugins-message-container'>\r\n                <span role='alert'>{formik.errors.email}</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-5'>Role</label>\r\n            {/* end::Label */}\r\n            {/* begin::Roles */}\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Administrator'\r\n                  id='kt_modal_update_role_option_0'\r\n                  checked={formik.values.role === 'Administrator'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_0'>\r\n                  <div className='fw-bolder text-gray-800'>Administrator</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for business owners and company administrators\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Developer'\r\n                  id='kt_modal_update_role_option_1'\r\n                  checked={formik.values.role === 'Developer'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_1'>\r\n                  <div className='fw-bolder text-gray-800'>Developer</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for developers or people primarily using the API\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Analyst'\r\n                  id='kt_modal_update_role_option_2'\r\n                  checked={formik.values.role === 'Analyst'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_2'>\r\n                  <div className='fw-bolder text-gray-800'>Analyst</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for people who need full access to analytics data, but don't need to update\r\n                    business settings\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Support'\r\n                  id='kt_modal_update_role_option_3'\r\n                  checked={formik.values.role === 'Support'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_3'>\r\n                  <div className='fw-bolder text-gray-800'>Support</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for employees who regularly refund payments and respond to disputes\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  id='kt_modal_update_role_option_4'\r\n                  value='Trial'\r\n                  checked={formik.values.role === 'Trial'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_4'>\r\n                  <div className='fw-bolder text-gray-800'>Trial</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for people who need to preview content data, but don't need to make any\r\n                    updates\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            {/* end::Roles */}\r\n          </div>\r\n          {/* end::Input group */}\r\n        </div>\r\n        {/* end::Scroll */}\r\n\r\n        {/* begin::Actions */}\r\n        <div className='text-center pt-15'>\r\n          <button\r\n            type='reset'\r\n            onClick={() => cancel()}\r\n            className='btn btn-light me-3'\r\n            data-kt-users-modal-action='cancel'\r\n            disabled={formik.isSubmitting || isUserLoading}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type='submit'\r\n            className='btn btn-primary'\r\n            data-kt-users-modal-action='submit'\r\n            disabled={isUserLoading || formik.isSubmitting || !formik.isValid || !formik.touched}\r\n          >\r\n            <span className='indicator-label'>Submit</span>\r\n            {(formik.isSubmitting || isUserLoading) && (\r\n              <span className='indicator-progress'>\r\n                Please wait...{' '}\r\n                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n              </span>\r\n            )}\r\n          </button>\r\n        </div>\r\n        {/* end::Actions */}\r\n      </form>\r\n      {(formik.isSubmitting || isUserLoading) && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {\r\n    isLoading,\r\n    data: user,\r\n    error,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-650px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15 my-7'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst UsersListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <UsersList />\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {UsersListWrapper}\r\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\nimport {PageLink, PageTitle} from '../../../../_metronic/layout/core'\r\nimport {UsersListWrapper} from './users-list/UsersList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'User Management',\r\n    path: '/apps/user-management/users',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst UsersPage = () => {\r\n  return (\r\n    <Routes>\r\n      <Route element={<Outlet />}>\r\n        <Route\r\n          path='users'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Surveyors list</PageTitle>\r\n              <UsersListWrapper />\r\n            </>\r\n          }\r\n        />\r\n      </Route>\r\n      <Route index element={<Navigate to='/apps/user-management/users' />} />\r\n    </Routes>\r\n  )\r\n}\r\n\r\nexport default UsersPage\r\n"],"names":["API_URL","process","USER_URL","GET_USERS_URL","createUser","user","axios","then","response","data","updateUser","id","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","children","useState","state","setState","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","query","setQuery","updatedQuery","useMemo","useEffect","useQuery","QUERIES","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","UsersListToolbar","className","type","onClick","path","UsersListGrouping","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","length","mutateAsync","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","href","avatar","src","toAbsoluteUrl","alt","name","initials","label","email","UserLastLoginCell","last_login","UserTwoStepsCell","two_steps","UserActionsCell","MenuComponent","deleteItem","userId","UserSelectionCell","isSelected","includes","checked","onChange","UserCustomHeader","title","tableProps","isSelectedForSorting","sort","order","undefined","style","cursor","initialQueryState","UserSelectionHeader","usersColumns","props","Cell","index","accessor","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","mappedLabel","UsersListPagination","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","next","items_per_page","UsersTable","users","columns","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","i","colSpan","UserEditModalHeader","initialUser","editUserSchema","Yup","shape","min","max","required","UserEditModalForm","isUserLoading","role","userForEdit","cancel","withRefresh","blankImg","userAvatarImg","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","isNotEmpty","console","error","handleSubmit","noValidate","backgroundImage","placeholder","getFieldProps","touched","errors","autoComplete","isSubmitting","htmlFor","isValid","UserEditModalFormWrapper","enabledQuery","enabled","onError","err","UserEditModal","document","body","classList","add","remove","tabIndex","UsersList","UsersListWrapper","usersBreadcrumbs","isSeparator","isActive","element","breadcrumbs","to"],"sourceRoot":""}